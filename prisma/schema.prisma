generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  USD
  EUR
}

enum TransactionStatus {
  CANCELLED
  INITIATED
  FAILED
  SUCCESS
}

enum TransactionRole {
  SENDER
  RECEIPIENT
  FEE
}

model User {
  id                String             @id @default(uuid())
  username          String             @unique
  email             String             @unique
  name              String
  passwordHash      String             @map("password_hash")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  wallet            Wallet?
  userVerifications UserVerification[]
  lastVerified      DateTime?

  @@map("users")
}

model Wallet {
  id           String              @id @default(uuid())
  user         User                @relation(fields: [userId], references: [id])
  userId       String              @unique @map("user_id")
  balance      Float
  currency     Currency
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")
  transactions WalletTransaction[]

  @@map("wallets")
}

model Transaction {
  id             String              @id @default(uuid())
  idempotencyKey String              @unique() @map("idempotency_key")
  amount         Float
  currency       Currency
  status         TransactionStatus
  statusReason   String?             @map("status_reason")
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  wallets        WalletTransaction[]

  @@map("transactions")
}

model UserVerification {
  id            String   @id @default(uuid())
  otpCode       String
  otpExpiresAt  DateTime
  linkToken     String
  linkExpiresAt DateTime
  attempts      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @map("user_id")

  @@map("user_verifications")
}

model WalletTransaction {
  walletId      String            @map("wallet_id")
  transactionId String            @map("transaction_id")
  role          TransactionRole
  amount        Float
  currency      Currency
  narration     String
  status        TransactionStatus
  statusReason  String?           @map("status_reason")
  transaction   Transaction       @relation(fields: [transactionId], references: [id])
  wallet        Wallet            @relation(fields: [walletId], references: [id])
  createdAt     DateTime          @default(now())

  @@id([walletId, transactionId, role])
  @@map("wallet_transactions")
}
